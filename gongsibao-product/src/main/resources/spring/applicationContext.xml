<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.2.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
       http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.2.xsd">

    <context:property-placeholder location="classpath*:/*.properties"/>
    <context:annotation-config />
    <context:component-scan base-package="com.gongsibao">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>
    <bean class="com.gongsibao.common.core.spring.ApplicationContextHelper"/>


    <!-- 动态数据源的父类,其中配置的参数为子数据库的default值 -->
    <bean id="dataSource_config" class="com.mchange.v2.c3p0.ComboPooledDataSource"	destroy-method="close" abstract="true">
        <property name="driverClass">
            <value>${jdbc.driverClassName}</value>
        </property>
        <property name="jdbcUrl">
            <value>${jdbc.url}</value>
        </property>
        <property name="user">
            <value>${jdbc.username}</value>
        </property>
        <property name="password">
            <value>${jdbc.password}</value>
        </property>
        <property name="maxPoolSize">
            <value>${jdbc.maxPoolSize}</value>
        </property>
        <property name="minPoolSize">
            <value>${jdbc.minPoolSize}</value>
        </property>
        <property name="initialPoolSize">
            <value>${jdbc.initialPoolSize}</value>
        </property>
        <property name="idleConnectionTestPeriod">
            <value>${jdbc.idleConnectionTestPeriod}
            </value>
        </property>
        <property name="maxIdleTime">
            <value>${jdbc.maxIdleTime}</value>
        </property>
    </bean>

    <!-- 子数据源,只读数据源热read02,只需对url,user,password重新赋值 -->
    <bean id="read02" destroy-method="close" parent="dataSource_config">
        <property name="jdbcUrl">
            <value>${jdbc.read.db02.url}</value>
        </property>
        <property name="user">
            <value>${jdbc.read.db02.username}</value>
        </property>
        <property name="password">
            <value>${jdbc.read.db02.password}</value>
        </property>
    </bean>

    <!-- 读写管理(统一配置) -->
    <bean id="dataSourceKey" class="com.gongsibao.common.db.DataSourceKeyImpl">
        <property name="readDateSourceMap">
            <map key-type="java.lang.String">
                <entry key="read02" value="read02" />
            </map>
        </property>
        <property name="writeKey">
            <value>write</value>
        </property>
    </bean>

    <!-- 子数据源,写操作主库,无需修改配置参数 -->
    <bean id="write" parent="dataSource_config"></bean>

    <!-- 动态数据源 -->
    <bean id="dataSource" class="com.gongsibao.common.db.DataSourceRouter">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="write" value-ref="write" />
                <entry key="read02" value-ref="read02" />
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="write" />
        <property name="dataSourceKey" ref="dataSourceKey" />
    </bean>

    <!-- 事务配置 -->
    <bean id="transactionManager"	class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 事务管理拦截器 -->
    <bean id="transactionInterceptor"	class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="transactionManager" />
        <property name="transactionAttributes">
            <props>
                <prop key="query*">PROPAGATION_SUPPORTS,-Exception</prop>
                <prop key="is*">PROPAGATION_SUPPORTS,-Exception</prop>
                <prop key="find*">PROPAGATION_SUPPORTS,-Exception</prop>
                <prop key="get*">PROPAGATION_SUPPORTS,-Exception</prop>
                <prop key="load*">PROPAGATION_SUPPORTS,-Exception</prop>
                <prop key="count*">PROPAGATION_SUPPORTS,-Exception</prop>
                <prop key="list*">PROPAGATION_SUPPORTS,-Exception</prop>
                <prop key="check*">PROPAGATION_SUPPORTS,-Exception</prop>

                <prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="create*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="del*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="remove*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="upd*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="edit*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="reset*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="register*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="insert*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="generate*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="*">PROPAGATION_SUPPORTS,-Exception</prop>

            </props>
        </property>
    </bean>

    <!-- 动态数据源拦截器 -->
    <bean id="dataSourceInterceptor" class="com.gongsibao.common.db.DataSourceInterceptor">
        <property name="dataSourceKey">
            <ref bean="dataSourceKey" />
        </property>
    </bean>

    <!-- 根据Name匹配拦截器(数据源、事务) -->
    <bean	class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames">
            <list>
                <value>*Service</value>
            </list>
        </property>
        <property name="interceptorNames">
            <list>
                <!-- 指定获取数据源的Interceptor -->
                <value>dataSourceInterceptor</value>
                <!-- 事务管理的Interceptor -->
                <value>transactionInterceptor</value>
            </list>
        </property>
    </bean>

</beans>